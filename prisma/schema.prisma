// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int             @id @default(autoincrement())
  phone           String?         @unique
  email           String?         @unique
  name            String
  avatar          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  tokens          Token[]
  product         Product[]
  fav             Fav[]
  post            Post[]
  comment         Comment[]
  interest        Interest[]
  receivedReviews Review[]        @relation(name: "receivedReviews")
  leftReviews     Review[]        @relation(name: "leftReviews")
  sales           Sale[]
  purchases       Purchase[]
  steams          Stream[]
  streamMessages  StreamMessage[]
  sendMessages    ChatRoom[]      @relation(name: "sendMessages")
  receiveMessages ChatRoom[]      @relation(name: "receiveMessages")
  messages        Messages[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  image       String
  title       String
  subTitle    String
  price       Int
  description String     @db.MediumText
  fav         Fav[]
  sales       Sale[]
  Purchases   Purchase[]
  chatRooms    ChatRoom[]
}

model Post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comments  Comment[]
  interest  Interest[]
  question  String     @db.MediumText
  longitude Float?
  latitude  Float?
}

model Interest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  comment   String   @db.MediumText
}

model Review {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  review     String   @db.MediumText
  leavedBy   User     @relation(name: "receivedReviews", fields: [leavedById], references: [id], onDelete: Cascade)
  leavedById Int
  leaveFor   User     @relation(name: "leftReviews", fields: [leaveForId], references: [id], onDelete: Cascade)
  leaveForId Int
}

model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Sale {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Purchase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Stream {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  streamTitle    String
  title          String
  price          Int
  description    String          @db.MediumText
  streamMessages StreamMessage[]
}

model StreamMessage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  message   String
}

model ChatRoom {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  buyer     User       @relation(name: "sendMessages", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId   Int
  seller    User       @relation(name: "receiveMessages", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId  Int
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  messages  Messages[]
}

model Messages {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  message    String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

// prisma 에 작성되는 model 은 npx prisma db push 코드를 통해 push 해야지만 planetscale 에 적용됨
// npx prisma format